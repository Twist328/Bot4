package com.example;

import javax.xml.parsers.DocumentBuilderFactory;
import java.io.InputStream;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import org.w3c.dom.*;

public class CurrencyService {

    private static final String CBR_URL = "https://www.cbr.ru/scripts/XML_daily.asp";
    private final Map<String, String> rates = new HashMap<>();

    public CurrencyService() {
        loadRates();
        startAutoReload();
    }
    public String getFormattedCurrencyList() {
        StringBuilder sb = new StringBuilder("*–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§:*\n\n");

        int count = 0;
        for (String key : rates.keySet()) {
            String flag = getFlagForCurrency(key);
            sb.append(flag).append(" *").append(key).append("*").append("   ");
            count++;
            if (count % 3 == 0) sb.append("\n"); // –∫–∞–∂–¥—ã–µ 3 –≤–∞–ª—é—Ç—ã ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        }

        return sb.toString();
    }
    private void loadRates() {
        try {
            InputStream stream = new URL(CBR_URL).openStream();
            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(stream);
            doc.getDocumentElement().normalize();

            NodeList nodeList = doc.getElementsByTagName("Valute");
            for (int i = 0; i < nodeList.getLength(); i++) {
                Node node = nodeList.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element = (Element) node;
                    String charCode = element.getElementsByTagName("CharCode").item(0).getTextContent();
                    String value = element.getElementsByTagName("Value").item(0).getTextContent().replace(",", ".");
                    String nominal = element.getElementsByTagName("Nominal").item(0).getTextContent();
                    rates.put(charCode, formatRate(charCode, value, nominal));
                }
            }

            System.out.println("‚úÖ –ö—É—Ä—Å—ã –¶–ë –†–§ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –¶–ë –†–§: " + e.getMessage());
        }
    }

    private void startAutoReload() {
        Timer timer = new Timer(true); // daemon thread
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                System.out.println("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...");
                loadRates();
            }
        }, 3600_000, 3600_000); // 1 —á–∞—Å = 3600_000 –º—Å
    }

    private String formatRate(String code, String value, String nominal) {
        String flag = getFlagForCurrency(code);
        return String.format("%s %s *%s* —Å—Ç–æ–∏—Ç *%s ‚ÇΩ*", flag, nominal, code, value);
    }

    private String getFlagForCurrency(String code) {
        return switch (code) {
            case "USD" -> "üá∫üá∏";
            case "EUR" -> "üá™üá∫";
            case "GBP" -> "üá¨üáß";
            case "JPY" -> "üáØüáµ";
            case "CNY" -> "üá®üá≥";
            case "CHF" -> "üá®üá≠";
            case "AUD" -> "üá¶üá∫";
            case "CAD" -> "üá®üá¶";
            case "BYN" -> "üáßüáæ";
            case "KZT" -> "üá∞üáø";
            case "RSD" -> "üá∑üá∏";
            case "VND" -> "üáªüá≥";
            case "AMD" -> "üá¶üá≤";
            case "GEL" -> "üá¨üá™";
            case "AED" -> "üá¶üá™";
            case "NZD" -> "üá≥üáø";
            case "PLN" -> "üáµüá±";
            case "ZAR" -> "üáµüá±";
            case "TRY" -> "üáπüá∑";
            case "HUF" -> "üá≠üá∫";
            case "HKD" -> "üá≠üá∞";
            case "NOK" -> "üá≥üá¥";
            case "RON" -> "üá∑üá¥";
            case "CZK" -> "üá®üáø";
            case "UAH" -> "üá∫üá¶";
            case "QAR" -> "üá∂üá¶";
            case "INR" -> "üáÆüá≥";
            case "THB" -> "üáπüá≠";
            case "KRW" -> "üá∞üá∑";
            case "IDR" -> "üáÆüá©";
            case "DKK" -> "üá©üá∞";
            case "XDR" ->"üåêIMF";
            case "SGD" -> "üá∏üá¨";
            case "KGS" -> "üá∞üá¨";
            case "TMT" -> "üáπüá≤";
            case "UZS" -> "üá∫üáø";
            case "MDL" -> "üá≤üá©";
            case "TJS" -> "üáπüáØ";
            case "BGN" -> "üáßüá¨";
            case "EGP" -> "üá™üá¨";
            case "AZN" -> "üá¶üáø";
            case "SEK" -> "üá∏üá™";
            case "BRL" -> "üáßüá∑";
            default -> "üí±";
        };
    }

    public String getRateFor(String code) {
        String upperCode = code.toUpperCase();
        return rates.getOrDefault(upperCode, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å –¥–ª—è: " + upperCode);
    }

    public String getOtherCurrenciesList() {
        StringBuilder sb = new StringBuilder("*–ö—É—Ä—Å—ã –¶–ë –†–§:*\n");
        for (String key : rates.keySet()) {
            sb.append("- ").append(key).append("\\n");
        }
        return sb.toString();
    }
}